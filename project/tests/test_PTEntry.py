import unittest
import unittest.mock

from myCode import PTEntry
from myCode import MyUtils
from myCode.CustomExceptions import *

class PTEntryTests(unittest.TestCase):

	DUMP_FILE_CONTENT1 = "4D4C4D4C56534D4C001000400000000100020001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"


	defaultMap = dict()

	@classmethod
	def setUpClass(self):
		self.defaultMap['ACL'] = [0, 3]
		self.defaultMap['isSwappedOut'] = False
		self.defaultMap['pageId'] = 84
		self.defaultMap['page location'] = 84

	def test_contructor(self):
		ptEntry = PTEntry.PTEntry([0, 3], False, 84, 84)

		self.assertEqual(self.defaultMap, ptEntry.toMap())

		self.assertEqual([0, 3], ptEntry.getACLList())

	def test_contructor2(self):
		self.assertRaises(ValueError, PTEntry.PTEntry, 10, True, 84, 84)
		self.assertRaises(ValueError, PTEntry.PTEntry, [10], "true", 84, 84)
		self.assertRaises(ValueError, PTEntry.PTEntry, [10], True, "82", 84)
		self.assertRaises(ValueError, PTEntry.PTEntry, [10], True, 84, 84.2)

	def test_toMap(self):
		ptEntry = PTEntry.PTEntry([0, 3], False, 84, 84)
		map = ptEntry.toMap()

		self.assertEqual(self.defaultMap, map)

	def test_parseFromHex1(self):
		hex = "3D4C4D4C56534D4C000800400000000100030001"
		with self.assertRaises(MemoryDumpFormatException) as context:
			PTEntry.parseFromHexDump(hex, 84)

	def test_parseFromHex2(self):
		hex = "4D4C4D4C57534D4C000800400000000100030001"
		with self.assertRaises(MemoryDumpFormatException) as context:
			PTEntry.parseFromHexDump(hex, 84)

	def test_parseFromHex3(self):
		hex = "4D4C4D4C56534D4C000800400000000100030001"
		with self.assertRaises(ValueError) as context:
			PTEntry.parseFromHexDump(hex, 84)

	@unittest.mock.patch('myCode.PTEntry.getPTEntryDataWithSize')
	def test_parseFromHex4(self, mock_utils):
		hex = "4D4C4D4C56534D4C000800400000000100030001"
		while len(hex) < 2048:
			hex = hex + "00"
		dump = "0054030000000000000000000000000000000000000000000000000000000000"
		mock_utils.return_value = dump
		data = PTEntry.parseFromHexDump(hex, 84)
		self.assertEqual(self.defaultMap, data.toMap())

	def test_getPTEntrySizeWithPageNumber1(self):
		hex = "4D4C4D4C56534D4C000800400000000100030001"

		while len(hex) < 2048:
			hex = hex + "00"

		expectedResult = 7424
		size =  PTEntry.getPTEntrySizeWithPageNumber(hex, 84)
		self.assertEqual(expectedResult, size)

	


if __name__ == "__main__":
	unittest.main()

